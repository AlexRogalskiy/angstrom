# OASIS_START
# DO NOT EDIT (digest: 8492d4fae0e2aa9890759cb45ff0a461)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library angstrom
"lib/angstrom.cmxs": use_angstrom
<lib/*.ml{,i,y}>: pkg_cstruct
<lib/*.ml{,i,y}>: pkg_result
# Library angstrom_unix
"unix/angstrom_unix.cmxs": use_angstrom_unix
<unix/*.ml{,i,y}>: pkg_cstruct
<unix/*.ml{,i,y}>: pkg_result
<unix/*.ml{,i,y}>: use_angstrom
# Library angstrom_lwt
"lwt/angstrom_lwt.cmxs": use_angstrom_lwt
<lwt/*.ml{,i,y}>: pkg_cstruct
<lwt/*.ml{,i,y}>: pkg_lwt
<lwt/*.ml{,i,y}>: pkg_result
<lwt/*.ml{,i,y}>: use_angstrom
# Library angstrom_async
"async/angstrom_async.cmxs": use_angstrom_async
<async/*.ml{,i,y}>: pkg_async
<async/*.ml{,i,y}>: pkg_cstruct
<async/*.ml{,i,y}>: pkg_result
<async/*.ml{,i,y}>: pkg_threads
<async/*.ml{,i,y}>: use_angstrom
# Executable test_angstrom
<lib_test/test_angstrom.{native,byte}>: pkg_alcotest
<lib_test/test_angstrom.{native,byte}>: pkg_cstruct
<lib_test/test_angstrom.{native,byte}>: pkg_result
<lib_test/test_angstrom.{native,byte}>: use_angstrom
<lib_test/*.ml{,i,y}>: pkg_alcotest
<lib_test/*.ml{,i,y}>: pkg_cstruct
<lib_test/*.ml{,i,y}>: pkg_result
<lib_test/*.ml{,i,y}>: use_angstrom
# Executable pure_benchmark
<benchmarks/pure_benchmark.{native,byte}>: pkg_async
<benchmarks/pure_benchmark.{native,byte}>: pkg_core_bench
<benchmarks/pure_benchmark.{native,byte}>: pkg_cstruct
<benchmarks/pure_benchmark.{native,byte}>: pkg_result
<benchmarks/pure_benchmark.{native,byte}>: pkg_threads
<benchmarks/pure_benchmark.{native,byte}>: use_angstrom
<benchmarks/*.ml{,i,y}>: pkg_core_bench
# Executable async_benchmark
<benchmarks/async_benchmark.{native,byte}>: pkg_async
<benchmarks/async_benchmark.{native,byte}>: pkg_cstruct
<benchmarks/async_benchmark.{native,byte}>: pkg_result
<benchmarks/async_benchmark.{native,byte}>: pkg_threads
<benchmarks/async_benchmark.{native,byte}>: use_angstrom
<benchmarks/async_benchmark.{native,byte}>: use_angstrom_async
<benchmarks/*.ml{,i,y}>: pkg_async
<benchmarks/*.ml{,i,y}>: pkg_threads
<benchmarks/*.ml{,i,y}>: use_angstrom_async
# Executable lwt_benchmark
<benchmarks/lwt_benchmark.{native,byte}>: pkg_cstruct
<benchmarks/lwt_benchmark.{native,byte}>: pkg_lwt
<benchmarks/lwt_benchmark.{native,byte}>: pkg_lwt.unix
<benchmarks/lwt_benchmark.{native,byte}>: pkg_result
<benchmarks/lwt_benchmark.{native,byte}>: use_angstrom
<benchmarks/lwt_benchmark.{native,byte}>: use_angstrom_lwt
<benchmarks/*.ml{,i,y}>: pkg_cstruct
<benchmarks/*.ml{,i,y}>: pkg_lwt
<benchmarks/*.ml{,i,y}>: pkg_lwt.unix
<benchmarks/*.ml{,i,y}>: pkg_result
<benchmarks/*.ml{,i,y}>: use_angstrom
<benchmarks/*.ml{,i,y}>: use_angstrom_lwt
# OASIS_STOP
