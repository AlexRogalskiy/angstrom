# OASIS_START
# DO NOT EDIT (digest: b41908a0630c42507cecfecb81f834a3)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library angstrom
"lib/angstrom.cmxs": use_angstrom
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(ocplib-endian)
<lib/*.ml{,i,y}>: package(result)
# Library angstrom_unix
"unix/angstrom_unix.cmxs": use_angstrom_unix
<unix/*.ml{,i,y}>: package(cstruct)
<unix/*.ml{,i,y}>: package(ocplib-endian)
<unix/*.ml{,i,y}>: package(result)
<unix/*.ml{,i,y}>: use_angstrom
# Library angstrom_lwt_unix
"lwt/angstrom_lwt_unix.cmxs": use_angstrom_lwt_unix
<lwt/*.ml{,i,y}>: package(cstruct)
<lwt/*.ml{,i,y}>: package(lwt.unix)
<lwt/*.ml{,i,y}>: package(ocplib-endian)
<lwt/*.ml{,i,y}>: package(result)
<lwt/*.ml{,i,y}>: use_angstrom
# Library angstrom_async
"async/angstrom_async.cmxs": use_angstrom_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(cstruct)
<async/*.ml{,i,y}>: package(ocplib-endian)
<async/*.ml{,i,y}>: package(result)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: use_angstrom
# Executable test_angstrom
<lib_test/test_angstrom.{native,byte}>: package(alcotest)
<lib_test/test_angstrom.{native,byte}>: package(cstruct)
<lib_test/test_angstrom.{native,byte}>: package(ocplib-endian)
<lib_test/test_angstrom.{native,byte}>: package(result)
<lib_test/test_angstrom.{native,byte}>: use_angstrom
<lib_test/*.ml{,i,y}>: package(alcotest)
<lib_test/*.ml{,i,y}>: package(cstruct)
<lib_test/*.ml{,i,y}>: package(ocplib-endian)
<lib_test/*.ml{,i,y}>: package(result)
<lib_test/*.ml{,i,y}>: use_angstrom
# Executable pure_benchmark
<benchmarks/pure_benchmark.{native,byte}>: package(core_bench)
<benchmarks/pure_benchmark.{native,byte}>: package(cstruct)
<benchmarks/pure_benchmark.{native,byte}>: package(ocplib-endian)
<benchmarks/pure_benchmark.{native,byte}>: package(result)
<benchmarks/pure_benchmark.{native,byte}>: package(threads)
<benchmarks/pure_benchmark.{native,byte}>: use_angstrom
<benchmarks/*.ml{,i,y}>: package(core_bench)
# Executable async_benchmark
<benchmarks/async_benchmark.{native,byte}>: package(async)
<benchmarks/async_benchmark.{native,byte}>: package(cstruct)
<benchmarks/async_benchmark.{native,byte}>: package(ocplib-endian)
<benchmarks/async_benchmark.{native,byte}>: package(result)
<benchmarks/async_benchmark.{native,byte}>: package(threads)
<benchmarks/async_benchmark.{native,byte}>: use_angstrom
<benchmarks/async_benchmark.{native,byte}>: use_angstrom_async
<benchmarks/*.ml{,i,y}>: package(async)
<benchmarks/*.ml{,i,y}>: package(threads)
<benchmarks/*.ml{,i,y}>: use_angstrom_async
# Executable lwt_benchmark
<benchmarks/lwt_benchmark.{native,byte}>: package(cstruct)
<benchmarks/lwt_benchmark.{native,byte}>: package(lwt.unix)
<benchmarks/lwt_benchmark.{native,byte}>: package(ocplib-endian)
<benchmarks/lwt_benchmark.{native,byte}>: package(result)
<benchmarks/lwt_benchmark.{native,byte}>: use_angstrom
<benchmarks/lwt_benchmark.{native,byte}>: use_angstrom_lwt_unix
<benchmarks/*.ml{,i,y}>: package(cstruct)
<benchmarks/*.ml{,i,y}>: package(lwt.unix)
<benchmarks/*.ml{,i,y}>: package(ocplib-endian)
<benchmarks/*.ml{,i,y}>: package(result)
<benchmarks/*.ml{,i,y}>: use_angstrom
<benchmarks/*.ml{,i,y}>: use_angstrom_lwt_unix
# OASIS_STOP
